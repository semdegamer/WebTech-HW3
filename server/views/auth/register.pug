extends defaultAuth

block append vars
  - var title = "Register"
  - styles.push("auth/logreg")
  - var pathDepth = 2;

block main
  main.main-logreg
    div.home-link
      a(href= base) â¬…home
      h2 Register

    form#registerForm(enctype="multipart/form-data", method="POST", action="/auth/register")
      //- First Name Field
      label(for="firstName") First name:
      input(type="text", id="firstName", name="firstName", placeholder="First Name", required)

      //- Last Name Field
      label(for="lastName") Last name:
      input(type="text", id="lastName", name="lastName", placeholder="Last Name", required)

      //- Email Field (Should enforce the email format)
      label(for="email") Email:
      input(type="email", id="email", name="email", placeholder="Email", required) 

      //- Password Field
      label(for="password") Password:
      input(type="password", id="password", name="password", placeholder="Password", required)

      //- Confirm Password Field
      label(for="confirmPassword") Confirm password:
      input(type="password", id="confirmPassword", name="confirmPassword", placeholder="Repeat Password", required)

      //- Optional Birthdate Field
      label(for="birthDate") Birth date: 
      input(type="date", id="birthDate", name="birthDate")

      //- Optional Hobbies Field
      label(for="hobbies") Hobbies (comma separated):
      input(type="text", id="hobbies", name="hobbies", placeholder="e.g. reading, coding")

      //- Programs Dropdown
      label(for="programId") Select Program:
      select(id="programId", name="programId", multiple size="5")
        each program in programs
          option(value=program.programID) #{program.name}

      //- Courses Dropdown
      label(for="courses") Enroll in courses (Press shift/ ctrl to select multiple):
      select(id="courseIds", name="courseIds", multiple size="5")
        each course in courses
          option(value=course.courseID) #{course.name}

      //- Avatar Upload Field
      label(for="avatarInput") Profile picture:
      input#avatarInput(type="file", name="avatar", accept="image/*", required)

      p#errorMessage.error

      .button-group
        button(type="submit", id="submit-button") Register
        a(href=(base + "auth/login")) Login

  script.
    // Client-side JavaScript for form validation and submission using FormData
    document.getElementById("registerForm").addEventListener("submit", async function(event) {
      event.preventDefault();

      // Get form fields
      let firstName = document.getElementById("firstName").value.trim();
      let lastName = document.getElementById("lastName").value.trim();
      let email = document.getElementById("email").value.trim();
      let password = document.getElementById("password").value;
      let confirmPassword = document.getElementById("confirmPassword").value;
      let birthDate = document.getElementById("birthDate").value;
      let hobbies = document.getElementById("hobbies").value.trim();

      // Get Programs
      let programId = document.getElementById("programId").value;
      formData.append("programId", programId);

      // Get selected courses (multiple selections allowed)
      let courseSelect = document.getElementById("courseIds");
      let courseIds = Array.from(courseSelect.selectedOptions).map(opt => opt.value);

      // Get the avatar file input
      let avatarInput = document.getElementById("avatarInput");
      let avatarFile = avatarInput.files[0];

      let errorMessage = document.getElementById("errorMessage");
      let submitButton = document.getElementById("submit-button");

      errorMessage.textContent = "";

      // Validate names (letters only) and length requirements
      const nameRegex = /^[a-zA-Z]+$/;
      if (!nameRegex.test(firstName) || !nameRegex.test(lastName)) {
        errorMessage.textContent = "Names can only contain letters!";
        return;
      }
      if (firstName.length < 2 || firstName.length > 50 || lastName.length < 2 || lastName.length > 50) {
        errorMessage.textContent = "Names must be between 2 and 50 characters!";
        return;
      }

      // Validate email length
      if (email.length > 100) {
        errorMessage.textContent = "Email must be 100 characters or less!";
        return;
      }

      // Validate password length
      if (password.length < 8 || password.length > 100) {
        errorMessage.textContent = "Password must be between 8 and 100 characters!";
        return;
      }
      
      // Ensure password and confirm password match
      if (password !== confirmPassword) {
        errorMessage.textContent = "Passwords do not match!";
        return;
      }

      // Ensure avatar file is selected
      if (!avatarFile) {
        errorMessage.textContent = "Please select a profile picture!";
        return;
      }

      // Disable submit button to prevent multiple submissions
      submitButton.disabled = true;

      // Create FormData and append all fields
      const formData = new FormData();
      formData.append("firstName", firstName);
      formData.append("lastName", lastName);
      formData.append("email", email);
      formData.append("password", password);
      formData.append("birthDate", birthDate);
      formData.append("hobbies", hobbies);
      
      // When dealing with multiple courses, append each courseId
      courseIds.forEach(courseId => formData.append("courseIds", courseId));
      
      // Append the avatar file
      formData.append("avatar", avatarFile);

      try {
        // Send the FormData (multipart/form-data is set automatically)
        const response = await fetch('/auth/register', {
          method: 'POST',
          body: formData
        });

        const result = await response.json();

        //- If registration is successful, redirect to home page
        if (result.success) {
          window.location.href = "../";
        } else {
          //- Show any error messages from the server
          errorMessage.textContent = result.message;
        }
      } catch (err) {
        console.error(err);
        errorMessage.textContent = "An error occurred. Please try again later.";
      }

      // Re-enable the submit button after the request
      submitButton.disabled = false;
    });
